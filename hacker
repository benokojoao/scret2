<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Hacker Dashboard — Terminal</title>
  <style>
    /* Visual estilo terminal hacker */
    body {
      margin:0;
      height:100vh;
      background:#000;
      color:#33ff66;
      font-family: "Courier New", Courier, monospace;
      display:flex;
      flex-direction:column;
    }
    header{
      padding:14px 18px;
      border-bottom:1px solid rgba(255,255,255,0.03);
      display:flex; justify-content:space-between; align-items:center;
      background:linear-gradient(0deg, rgba(0,0,0,0.6), rgba(0,0,0,0.2));
    }
    header .title{ font-weight:700; font-size:18px; letter-spacing:1px; }
    header .muted{ color:#4bd67a; font-size:13px; opacity:0.9; }
    main{ padding:18px; overflow:auto; flex:1; }
    .line{
      padding:10px 12px;
      border-radius:6px;
      background: rgba(0,0,0,0.4);
      margin-bottom:10px;
      box-shadow: inset 0 -1px 0 rgba(255,255,255,0.02);
    }
    .meta{ color:#7ef2a6; font-size:12px; margin-bottom:6px; }
    .title-line{ color:#33ff66; font-weight:700; }
    .text-line{ color:#bfffd6; white-space:pre-wrap; margin-top:6px; }
    .controls{ display:flex; gap:8px; align-items:center; }
    button{ background:#072; border:none; color:#c9ffd6; padding:8px 10px; border-radius:6px; cursor:pointer; }
    .small{ font-size:13px; color:#6fe29b; opacity:0.9; }
  </style>
</head>
<body>
  <header>
    <div>
      <div class="title">HACKER DASHBOARD</div>
      <div class="muted">monitor local de eventos • estilo terminal</div>
    </div>
    <div class="controls">
      <button id="refreshBtn">Refresh</button>
      <button id="clearBtn">Clear Local</button>
    </div>
  </header>

  <main id="out">
    <!-- linhas serão injetadas aqui -->
  </main>

  <script>
    const out = document.getElementById('out');
    const refreshBtn = document.getElementById('refreshBtn');
    const clearBtn = document.getElementById('clearBtn');

    function loadOutgoing(){
      // Preferimos a chave 'outgoingEvents' usada pelo index.html
      const arr = JSON.parse(localStorage.getItem('outgoingEvents') || '[]');
      out.innerHTML = '';
      if (!arr.length){
        const p = document.createElement('div');
        p.className = 'line';
        p.innerHTML = '<div class="small">Nenhum evento encontrado localmente. Abra index.html e envie eventos.</div>';
        out.appendChild(p);
        return;
      }
      // mostra do mais antigo para o mais novo
      arr.forEach(ev => {
        const line = document.createElement('div');
        line.className = 'line';
        line.innerHTML = `
          <div class="meta">[${ev.date}] • status: ${ev.remoteStatus || 'local'}</div>
          <div class="title-line">${escapeHtml(ev.title)}</div>
          <div class="text-line">${escapeHtml(ev.text)}</div>
        `;
        out.appendChild(line);
      });
      // rolar para baixo automaticamente
      out.scrollTop = out.scrollHeight;
    }

    function escapeHtml(s){
      if (!s) return '';
      return s.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/\\n/g,'<br>');
    }

    refreshBtn.addEventListener('click', loadOutgoing);
    clearBtn.addEventListener('click', ()=>{
      if (!confirm('Limpar histórico local de outgoingEvents?')) return;
      localStorage.removeItem('outgoingEvents');
      loadOutgoing();
    });

    // inicializa
    loadOutgoing();

    // opcional: observar mudanças no localStorage vindas de outra aba (index.html)
    window.addEventListener('storage', (ev) => {
      if (ev.key === 'outgoingEvents' || ev.key === 'timelineEvents') {
        loadOutgoing();
      }
    });
  </script>
</body>
</html>
